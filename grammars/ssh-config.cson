name: "SSH Config"
scopeName: "source.ssh-config"
fileTypes: [
	"sshconfig"
	"sshdconfig"
	"ssh_config"
	"ssh-config"
	"sshd_config"
	"sshd-config"
	".ssh/config"
]
patterns: [include: "#main"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:ssh-config)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:sshconfig)
	(?=$|\\s|:)
"""

injections:
	"L:meta.scope.match.ssh-config meta.pattern-list,
	 L:meta.field.certificatefile.ssh-config,
	 L:meta.field.controlpath.ssh-config,
	 L:meta.field.identityagent.ssh-config,
	 L:meta.field.identityfile.ssh-config,
	 L:meta.field.localforward.ssh-config,
	 L:meta.field.remotecommand.ssh-config,
	 L:meta.field.remoteforward.ssh-config,
	 L:meta.field.userknownhostsfile.ssh-config":
		patterns: [{
			name: "constant.other.placeholder.token.ssh-config"
			match: "(%)[%CLdhiklnpru]"
			captures:
				1: name: "punctuation.definition.token.ssh-config"
		}]

	"L:meta.field.hostname.ssh-config":
		patterns: [{
			name: "constant.other.placeholder.token.ssh-config"
			match: "(%)[%h]"
			captures:
				1: name: "punctuation.definition.token.ssh-config"
		}]
	
	"L:meta.field.knownhostscommand.ssh-config":
		patterns: [{
			name: "constant.other.placeholder.token.ssh-config"
			match: "(%)[%CHIKLdfhiklnprtu]"
			captures:
				1: name: "punctuation.definition.token.ssh-config"
		}]

	"L:meta.field.localcommand.ssh-config": # FIXME
		patterns: [{
			name: "constant.other.placeholder.token.ssh-config"
			match: "(%)[CDdFfHhIiKkLlnprsTtUu]"
			captures:
				1: name: "punctuation.definition.token.ssh-config"
		}]

	"L:meta.field.proxycommand.ssh-config": # FIXME
		patterns: [{
			name: "constant.other.placeholder.token.ssh-config"
			match: "(%)[%hnpr]"
			captures:
				1: name: "punctuation.definition.token.ssh-config"
		}]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#scope"}
			{include: "#field"}
		]


	# Hostname or IP address
	addr:
		patterns: [{
			# IPv4 address
			name:  "constant.other.ip-address.ipv4.ssh-config"
			match: "(?:\\G|^)[*?\\d]+(?:\\.[*?\\d]+){3}"
			captures:
				0: patterns: [include: "#wildcard"]
		},{
			# IPv6 address (source: https://ihateregex.io/expr/ipv6/)
			match: """(?xi) (\\[)
				( (?:[0-9A-F]{1,4}:){7}[0-9A-F]{1,4}
				| (?:[0-9A-F]{1,4}:){1,7}:
				| (?:[0-9A-F]{1,4}:){1,6}:[0-9A-F]{1,4}
				| (?:[0-9A-F]{1,4}:){1,5}(?::[0-9A-F]{1,4}){1,2}
				| (?:[0-9A-F]{1,4}:){1,4}(?::[0-9A-F]{1,4}){1,3}
				| (?:[0-9A-F]{1,4}:){1,3}(?::[0-9A-F]{1,4}){1,4}
				| (?:[0-9A-F]{1,4}:){1,2}(?::[0-9A-F]{1,4}){1,5}
				| [0-9A-F]{1,4}:(?::[0-9A-F]{1,4}){1,6}
				| :(?:(?::[0-9A-F]{1,4}){1,7}|:)
				| FE80:(?::[0-9A-F]{0,4}){0,4}%[0-9A-Z]+
				| ::(?:FFFF(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?[0-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1?[0-9])?[0-9])
				| (?:[0-9A-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?[0-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1?[0-9])?[0-9])
				) (\\])"""
			captures:
				2: name: "constant.other.ip-address.ipv6.ssh-config"
				1: name: "punctuation.definition.ip-address.begin.ssh-config"
				3: name: "punctuation.definition.ip-address.end.ssh-config"
		},{
			# Anything else
			name:  "string.unquoted.hostname.ssh-config"
			begin: "\\G|^"
			end:   "$"
			patterns: [include: "#wildcard"]
		}]


	# The keyword “any” with no adjacent arguments
	any:
		name: "constant.language.any.ssh-config"
		match: "\\Gany(?=\\s*(?:$|#))"


	# Boolean value
	boolean:
		match: "(?:\\G|^|(?<=\\s|=))(?i:(yes|on)|(no|off))(?=$|\\s|#)"
		captures:
			1: name: "constant.language.boolean.true.ssh-config"
			2: name: "constant.language.boolean.false.ssh-config"


	# List separator
	comma:
		name: "punctuation.separator.delimiter.comma.ssh-config"
		match: ","


	# Comment lines
	comment:
		name:  "comment.line.number-sign.ssh-config"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.ssh-config"


	# Keyword/argument pair
	field:
		patterns: [{
			# Boolean-type fields: “yes” or “no”
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: """(?xi) ^[ \\t]*
				( AFSTokenPassing
				| AllowAgentForwarding
				| BatchMode
				| CanonicalizeFallbackLocal
				| CheckHostIP
				| ClearAllForwardings
				| DisableForwarding
				| EnableSSHKeysign
				| ExitOnForwardFailure
				| ExposeAuthInfo
				| FallbackToRSH
				| ForkAfterAuthentication
				| ForwardX11
				| ForwardX11Trusted
				| GSSAPIAuthentication
				| GSSAPICleanupCredentials
				| GSSAPIDelegateCredentials
				| GSSAPIStrictAcceptorCheck
				| GSSAPITrustDNS
				| HashKnownHosts
				| HostbasedAuthentication
				| HostbasedUsesNameFromPacketOnly
				| IdentitiesOnly
				| IgnoreUserKnownHosts
				| KbdInteractiveAuthentication
				| KeepAlive
				| ChallengeResponseAuthentication
				| KerberosAuthentication
				| KerberosGetAFSToken
				| KerberosOrLocalPasswd
				| KerberosTicketCleanup
				| KerberosTGTPassing
				| NoHostAuthenticationForLocalhost
				| PasswordAuthentication
				| PermitEmptyPasswords
				| PermitLocalCommand
				| PermitTTY
				| PermitUserRC
				| PrintLastLog
				| PrintMotd
				| ProxyUseFdpass
				| PubkeyAuthentication
				| DSAAuthentication
				| RHostsAuthentication
				| RHostsRSAAuthentication
				| RSAAuthentication
				| SKeyAuthentication
				| StdinNull
				| StreamLocalBindUnlink
				| StrictModes
				| TCPKeepAlive
				| TISAuthentication
				| UseDNS
				| UseRSH
				| UseKeychain
				| UsePrivilegedPort
				| UseRoaming
				| VisualHostKey
				| X11Forwarding
				| X11UseLocalhost
				) (?:\\s*(=)|(?=$|\\s))[ \\t]* """
			end: "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#boolean"]
		},{
			# Integer-type fields
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: """(?xi) ^[ \\t]*
				( CanonicalizeMaxDots
				| ClientAliveCountMax
				| CompressionLevel
				| ConnectionAttempts
				| MaxAuthTries
				| MaxSessions
				| NumberOfPasswordPrompts
				| Port
				| ServerAliveCountMax
				| X11DisplayOffset
				) (?:\\s*(=)|(?=$|\\s))[ \\t]* """
			end: "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#integer"]
		},{
			# Identifier lists
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: """(?xi) ^[ \\t]*
				( AllowGroups
				| AllowUsers
				| CASignatureAlgorithms
				| Ciphers?
				| DenyGroups
				| DenyUsers
				| FingerprintHash
				| HostKeyAlgorithms
				| HostbasedAcceptedAlgorithms
				| HostbasedAcceptedKeyTypes
				| HostbasedKeyTypes
				| KbdInteractiveDevices
				| KexAlgorithms
				| MACs
				| PreferredAuthentications
				| Protocol
				| PubkeyAcceptedAlgorithms
				| PubkeyAcceptedKeyTypes
				) (?:\\s*(=)|(?=$|\\s))[ \\t]* """
			end: "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#identifierList"]
		},{
			# Pattern list
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(IgnoreUnknown)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#patternList"]
		},{
			# Strings, either quoted or unquoted
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: """(?xi) ^[ \\t]*
				( AuthorizedKeysCommandUser
				| AuthorizedKeysFile
				| AuthorizedPrincipalsCommandUser
				| AuthorizedPrincipalsFile
				| Banner
				| BindAddress
				| BindInterface
				| CanonicalDomains
				| CertificateFile
				| ChrootDirectory
				| ControlPath
				| GlobalKnownHostsFile2?
				| HostCertificate
				| HostKeyAlias
				| Hostname
				| HostKey
				| IdentityFile2?
				| Include
				| ModuliFile
				| PKCS11Provider
				| PidFile
				| RDomain
				| RevokedHostKeys
				| RevokedKeys
				| SmartCardDevice
				| TrustedUserCAKeys
				| UserKnownHostsFile2?
				| User
				| XAuthLocation
				) (?:\\s*(=)|(?=$|\\s))[ \\t]* """
			end: "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#none"}
				{include: "#stringList"}
			]
		},{
			# Temporal fields
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: """(?xi) ^[ \\t]*
				( ClientAliveInterval
				| ConnectTimeout
				| ControlPersist
				| ForwardX11Timeout
				| LoginGraceTime
				| ServerAliveInterval
				) (?:\\s*(=)|(?=$|\\s))[ \\t]* """
			end: "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{include: "#time"}
			]
		},{
			# External command
			name: "meta.field.${1:/downcase}.ssh-config"
			match: """(?x) ^[ \\t]*
				(?i:
					( AuthorizedKeysCommand
					| AuthorizedPrincipalsCommand
					| ForceCommand
					| KnownHostsCommand
					| LocalCommand
					| ProxyCommand
					| RemoteCommand
					) (?:\\s*(=))?
					|
					(Subsystem)
					(?:\\s*(=))?
					(?:\\s+([^\\s\\#]+))?
				) (?=$|\\s) [ \\t]*
				( (none)
				| ([^\\s\\#][^\\#]*)
				)? (?=\\s*(?:$|\\#)) """
			captures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
				3: name: "keyword.operator.field-name.ssh-config"
				4: name: "keyword.operator.assignment.ssh-config"
				5: name: "entity.name.subsystem.ssh-config"
				6: name: "meta.arguments.ssh-config"
				7: name: "constant.language.none.ssh-config"
				8: name: "source.embedded.shell.ssh-config", patterns: [include: "source.shell"]
		},{
			# AcceptEnv, SendEnv
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*((?:Accept|Send)Env)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				match: "(-)?(?!\\d)([*?\\w]+)"
				captures:
					1: name: "keyword.operator.logical.negate.not.ssh-config"
					2: name: "variable.environment.ssh-config", patterns: [include: "#wildcard"]
			}]
		},{
			# AddKeysToAgent
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(AddKeysToAgent)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{match: "\\Gask(?=\\s|$|#)", name: "constant.language.ask.ssh-config"}
				{include: "#boolean"}
				{include: "#time"}
				
				# confirm [time-interval]
				match: "\\G(confirm)(\\s+(?:\\d+(?:[SMHDWsmhdw]|\\b))++)?(?=\\s*(?:$|#))"
				captures:
					1: name: "constant.language.ask.ssh-config"
					2: patterns: [include: "#time"]
			]
		},{
			# AddressFamily
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(AddressFamily)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.address-family.${1:/downcase}.ssh-config"
				match: "\\G(inet6?)(?=\\s|$|#)"
			}, include: "#any"]
		},{
			# AllowStreamLocalForwarding, AllowTcpForwarding
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(Allow(?:StreamLocalForwarding|TcpForwarding))(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{match: "\\G(all|local|remote)(?=\\s|$|#)", name: "constant.language.$1.ssh-config"}
				{include: "#boolean"}
			]
		},{
			# AuthenticationMethods
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(AuthenticationMethods)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#any"}
				{include: "#identifierList"}
			]
		},{
			# CanonicalizeHostname
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(CanonicalizeHostname)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{match: "\\G(always)(?=\\s*(?:$|#))", name: "constant.language.$1.ssh-config"}
				{include: "#boolean"}
				{include: "#none"}
			]
		},{
			# CanonicalizePermittedCNAMEs
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(CanonicalizePermittedCNAMEs)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				# <source-domains>:<target-domains>
				match: "\\G([^#:]*)(:)([^\\r\\n#:]*)(?=[ \\t]*(?:$|#))"
				captures:
					2:  name: "punctuation.separator.ssh-config"
					1: {name: "meta.source-domains.ssh-config", patterns: [include: "#patternListInline"]}
					3: {name: "meta.target-domains.ssh-config", patterns: [include: "#patternListInline"]}
			}, include: "#none"]
		},{
			# Compression
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(Compression)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.boolean.true.ssh-config"
				match: "\\G(delayed)(?=\\s|$|#)"
			}, include: "#boolean"]
		},{
			# ControlMaster
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(ControlMaster)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{match: "\\G(ask|auto|autoask)(?=\\s*(?:$|#))", name: "constant.language.$1.ssh-config"}
			]
		},{
			# EscapeChar
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(EscapeChar)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#none", {
				# ^A … ^Z
				name: "constant.character.escape.caret-notation.ssh-config"
				match: "\\G(\\^)[A-Za-z]"
				captures:
					1: name: "punctuation.definition.escape.ssh-config"
			},{
				# Highlight first character only
				match: "\\G([^\\s#])[ \\t]*([^\\s#]*)"
				captures:
					1: name: "constant.character.literal.ssh-config"
					3: name: "invalid.illegal.unexpected-characters.ssh-config"
			}]
		},{
			# ForwardAgent
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(ForwardAgent|SecurityKeyProvider)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{include: "#variableName"}
				{include: "#stringList"}
			]
		},{
			# GatewayPorts
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(GatewayPorts)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.$1.ssh-config"
				match: "\\G(clientspecified)(?=\\s*(?:$|#))"
			}, include: "#boolean"]
		},{
			# IPQoS
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(IPQoS)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#none"}
				{include: "#integer"}
				{include: "#identifierList"}
			]
		},{
			# IdentityAgent, HostKeyAgent
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(IdentityAgent|HostKeyAgent)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#none"}
				{match: "\\G(SSH_AUTH_SOCK)(?=\\s*(?:$|#))", name: "variable.environment.ssh-config"}
				{include: "#variableName"}
				{include: "#stringList"}
			]
		},{
			# IgnoreRhosts
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(IgnoreRhosts)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{match: "\\Gshosts-only(?=\\s*(?:$|#))", name: "constant.language.shosts-only.ssh-config"}
			]
		},{
			# ListenAddress [host-or-addr]:port|host-or-addr [rdomain domain]
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(ListenAddress)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [include: "#port", {
				# ListenAddress addr-without-port
				match: "\\G[^\\s#:]+(?=\\s*(?:$|#|\\s+rdomain\\s))"
				captures:
					0: patterns: [include: "#stringList"]
			},{
				# Additional rdomain(4)
				begin: "(?!\\G)[ \\t]+(rdomain)[ \\t]+(?=[^\\s#])"
				end:   "(?=\\s*(?:$|#))"
				beginCaptures:
					1: name: "storage.type.rdomain.ssh-config"
				patterns: [include: "#stringList"]
			}]
		},{
			# LocalForward, RemoteForward
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(DynamicForward|LocalForward|RemoteForward)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#port"}
				{include: "#stringList"}
			]
		},{
			# LogLevel
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(LogLevel)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name:  "constant.language.loglevel.ssh-config"
				match: "\\G(QUIET|FATAL|ERROR|INFO|VERBOSE|DEBUG[1-3]?)(?=\\s*(?:$|#))"
			}]
		},{
			# LogVerbose
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(LogVerbose)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				# [file]:[function]:[line-number]
				name:  "meta.log-spec.ssh-config"
				match: "(?:\\G|(?<=,))([^\\s:#,]+)(:)([^\\s:#,]+)(?:(:)([*?\\d]+)|(?=\\s|#|$))"
				captures:
					1: name: "string.unquoted.source-file.ssh-config", patterns: [include: "#wildcard"]
					2: name: "punctuation.separator.ssh-config"
					3: name: "entity.name.function.ssh-config", patterns: [include: "#wildcard"]
					4: name: "punctuation.separator.ssh-config"
					5: name: "constant.numeric.integer.decimal.line-number.ssh-config", patterns: [include: "#wildcard"]
			}]
		},{
			# MaxStartups
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(MaxStartups)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				# start:rate:full
				match: "\\G(\\d*)(:)(\\d*)(:)(\\d*)"
				captures:
					1: name: "meta.start-limit.ssh-config", patterns: [include: "#integer"]
					2: name: "punctuation.separator.ssh-config"
					3: name: "meta.rate-limit.ssh-config", patterns: [include: "#integer"]
					4: name: "punctuation.separator.ssh-config"
					5: name: "meta.full-limit.ssh-config", patterns: [include: "#integer"]
			}]
		},{
			# PerSourceMaxStartups
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PerSourceMaxStartups)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#none"}
				{include: "#integer"}
			]
		},{
			# PerSourceNetBlockSize
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PerSourceNetBlockSize)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				match: "\\G(\\d+)(?:(:)(\\d*))?"
				captures:
					1: patterns: [include: "#integer"]
					2: name: "punctuation.separator.ssh-config"
					3: patterns: [include: "#integer"]
			}]
		},{
			# PermitListen, PermitOpen, PermitRemoteOpen
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PermitListen|PermitOpen|PermitRemoteOpen)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#any"}
				{include: "#none"}
				{include: "#port"}
			]
		},{
			# PermitRootLogin
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PermitRootLogin)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.$1.ssh-config"
				match: "\\G(prohibit-password|forced-commands-only|without-password)(?=\\s*(?:$|#))"
			}, include: "#boolean"]
		},{
			# PermitTunnel, Tunnel
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PermitTunnel|Tunnel)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.$1.ssh-config"
				match: "\\G(ethernet|point-to-point)(?=\\s*(?:$|#))"
			}, include: "#boolean"]
		},{
			# PermitUserEnvironment
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PermitUserEnvironment)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{include: "#patternList"}
			]
		},{
			# ProxyJump
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(ProxyJump)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				# ssh:remote.git
				name:  "constant.other.reference.link.underline.ssh.url.ssh-config"
				match: "ssh:[^\\s#,]+"
			},{
				# [user@]host[:port]
				match: "(([^\\s\\#@:,]+)(@))?([^\\s\\#@:,]+(?::\\d+)?)"
				captures:
					1: name: "meta.authority.ssh-config"
					2: name: "string.unquoted.username.ssh-config"
					3: name: "meta.separator.punctuation.ssh-config"
					4: patterns: [include: "#port"]
			}]
		},{
			# PubkeyAuthOptions
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(PubkeyAuthOptions)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.$1.ssh-config"
				match: "\\G(none|touch-required|verify-required)(?=\\s*(?:$|#))"
			}]
		},{
			# RekeyLimit
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(RekeyLimit)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				match: "\\G((\\d+([KMG]?))|(default)|(none))(?:\\s+(((?:\\d+(?:[SMHDWsmhdw]|\\b))++)|(default)|(none)))?(?=\\s*(?:$|#))"
				captures:
					1: name: "meta.max-bytes.ssh-config"
					2: name: "constant.numeric.integer.decimal.filesize.ssh-config"
					3: name: "keyword.other.unit.filesize.ssh-config"
					4: name: "constant.language.default.ssh-config"
					5: patterns: [include: "#none"]
					6: name: "meta.timeout.ssh-config"
					7: patterns: [include: "#time"]
					8: name: "constant.language.default.ssh-config"
					9: name: "constant.language.none.ssh-config"
			}]
		},{
			# RequestTTY
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(RequestTTY)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{match: "\\G(auto|force)(?=\\s*(?:$|#))", name: "constant.language.$1.ssh-config"}
			]
		},{
			# SessionType
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(SessionType)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.language.$1.ssh-config"
				match: "\\G(none|default|subsystem)(?=\\s*(?:$|#))"
			}]
		},{
			# SetEnv
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(SetEnv)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name:  "meta.assignment.ssh-config"
				begin: "((?!\\d)[*?\\w]+)(=)"
				end:   "(?=\\s|$|#)"
				beginCaptures:
					1: name: "variable.environment.ssh-config"
					2: name: "keyword.operator.assignment.ssh-config"
				patterns: [{
					name: "string.unquoted.ssh-config"
					match: '\\G[^#\\s"]+'
				},{
					name:  "string.quoted.double.ssh-config"
					begin: '\\G"'
					end:   '"|(?=$)'
					beginCaptures: 0: name: "punctuation.definition.string.begin.ssh-config"
					endCaptures:   0: name: "punctuation.definition.string.end.ssh-config"
					patterns: [include: "#wildcard"]
				}]
			}]
		},{
			# StreamLocalBindMask
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(StreamLocalBindMask)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name: "constant.numeric.integer.octal.ssh-config"
				match: "\\G([0-7]+)(?=$|\\s|$)"
			},{
				name: "invalid.illegal.bad-character.ssh-config"
				match: "\\G[^\\s0-7#]+"
			}]
		},{
			# StrictHostKeyChecking
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(StrictHostKeyChecking)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				name: "constant.language.$1.ssh-config"
				match: "\\G(ask|accept-new)(?=\\s*(?:$|#))"
			]
		},{
			# SyslogFacility
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(SyslogFacility)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				name:  "constant.language.syslogfacility.ssh-config"
				match: "\\G(DAEMON|USER|AUTH|LOCAL[0-7])(?=\\s*(?:$|#))"
			}]
		},{
			# TunnelDevice
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(TunnelDevice)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				match: "\\G((\\d+)|(any))(:)((\\d+)|(any))(?=\\s*(?:$|#))"
				captures:
					1: name: "meta.local-tunnel.ssh-config"
					2: patterns: [include: "#integer"]
					3: name: "constant.language.any.ssh-config"
					4: name: "punctuation.separator.ssh-config"
					5: name: "meta.remote-tunnel.ssh-config"
					6: patterns: [include: "#integer"]
					7: name: "constant.language.any.ssh-config"
					8: name: "punctuation.separator.ssh-config"
			}]
		},{
			# UpdateHostKeys, VerifyHostKeyDNS
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(UpdateHostKeys|VerifyHostKeyDNS)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [
				{include: "#boolean"}
				{match: "\\Gask(?=\\s*(?:$|#))", name: "constant.language.ask.ssh-config"}
			]
		},{
			# VersionAddendum
			name:  "meta.field.${1:/downcase}.ssh-config"
			begin: "(?i)^[ \\t]*(VersionAddendum)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?=[ \\t]*(?:$|#))"
			beginCaptures:
				1: name: "keyword.operator.field-name.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			contentName: "meta.arguments.ssh-config"
			patterns: [{
				# Freeform text
				name:  "string.unquoted.herestring.ssh-config"
				begin: "\\G(?!none\\s*(?:$|#))(?=[^\\s#])"
				end:   "(?=\\s*(?:$|#))"
			}, include: "#none"]
		}]


	# Comma-separated list of identifiers (algorithm names, ciphers, etc)
	identifierList:
		match: "(?:^|\\G|(?<=\\s))([-+^])?([^\\s,]+(?:,[^\\s,]+)*+)"
		captures:
			1: name: "keyword.operator.combinator.ssh-config"
			2: patterns: [{
				# Bareword/unquoted string
				name: "constant.other.identifier.ssh-config"
				match: "[^\\s,]+"
				captures:
					0: patterns: [include: "#wildcard"]
			}, include: "#comma"]


	# Decimal integer
	integer:
		name: "constant.numeric.integer.decimal.ssh-config"
		match: "-?[0-9]+"


	# Lone “none” keyword, with no other arguments
	none:
		name: "constant.language.none.ssh-config"
		match: "\\G(none)(?=\\s*(?:$|#))"


	# Hostnames or IP addresses
	patternList:
		name:  "meta.pattern-list.ssh-config"
		begin: "\\G"
		end:   "(?=[ \\t]*(?:$|#))"
		patterns: [{
			name: "constant.other.pattern.ssh-config"
			match: "(!)?([^,\\s#]+)"
			captures:
				1: name: "keyword.operator.logical.not.negation.ssh-config"
				2: patterns: [include: "#wildcard"]
		}, include: "#comma"]

	# HACK
	patternListInline:
		begin: "(?:^|\\G)"
		end:   "(?=[ \\t]*(?:$|#))"
		patterns: [include: "#patternList"]


	# [address:]port
	port:
		match: "(?:\\G|^|(?<=[ \\t]))(?:(\\[[^\\]]+\\]|[^\\s:]*)(:))?([?*\\d]+)(?=\\s*(?:$|#)|\\s+(?:(?:[^\\s:#]+:)?\\d+|rdomain[ \\t]))"
		captures:
			1: patterns: [include: "#addr"]
			2: name: "punctuation.separator.ssh-config"
			3: name: "constant.numeric.integer.decimal.port-number.ssh-config", patterns: [include: "#wildcard"]


	# Scoped declarations
	scope:
		patterns: [{
			# Empty host/match line
			name:  "meta.scope.${1:/downcase}.empty.ssh-config"
			match: "(?i)(?:^|\\G)[ \\t]*(Host|Match)(?:\\s*(=))?(?=[ \\t]*(?:$|#))"
			captures:
				1: name: "keyword.control.host.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
		},{
			# Host
			name:  "meta.scope.host.ssh-config"
			begin: "(?i)(?:^|\\G)[ \\t]*(Host)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?i)(?!\\G)(?=^[ \\t]*(?:Host|Match)(?:$|\\s|=))"
			beginCaptures:
				1: name: "keyword.control.host.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			patterns: [
				{include: "#patternList"}
				{include: "#main"}
			]
		},{
			# Match
			name:  "meta.scope.match.ssh-config"
			begin: "(?i)(?:^|\\G)[ \\t]*(Match)(?:\\s*(=)|(?=$|\\s))[ \\t]*"
			end:   "(?i)(?!\\G)(?=^[ \\t]*(?:Host|Match)(?:$|\\s|=))"
			beginCaptures:
				1: name: "keyword.control.match.ssh-config"
				2: name: "keyword.operator.assignment.ssh-config"
			patterns: [{
				name: "constant.language.match-criteria.ssh-config"
				match: "\\GAll(?=\\s*(?:$|#))"
			},{
				name:  "meta.${1:/downcase}-match.ssh-config"
				begin: "\\G(?:(Address|Group|Host|LocalAddress|LocalPort|RDomain|User)(?=$|\\s|#))?[ \\t]*"
				end:   "(?=\\s*(?:$|#))"
				beginCaptures:
					1: name: "constant.language.match-criteria.ssh-config"
				contentName: "meta.arguments.ssh-config"
				patterns: [include: "#patternList"]
			}, include: "#main"]
		}]


	# Whitespace-separated list of strings
	stringList:
		patterns: [{
			# "Quoted string"
			name:  "string.quoted.double.ssh-config"
			begin: '"'
			end:   '"|(?=$)'
			beginCaptures: 0: name: "punctuation.definition.string.begin.ssh-config"
			endCaptures:   0: name: "punctuation.definition.string.end.ssh-config"
			patterns: [include: "#wildcard"]
		},{
			# Unquoted/bareword
			name:  "string.unquoted.ssh-config"
			match: '[^"\\s#]+'
			patterns: [include: "#wildcard"]
		}]


	# Time interval
	time:
		name:  "constant.other.time.interval.ssh-config"
		match: "(?:\\d+(?:[SMHDWsmhdw]|\\b))++"
		captures:
			0: patterns: [match: "\\D", name: "keyword.other.unit.time.ssh-config"]


	# Placeholder interpreted by certain fields
	token:
		name: "constant.other.placeholder.token.ssh-config"
		match: "(%)[%CDdFfHhIiKkLlnprsTtUu]"
		captures:
			1: name: "punctuation.definition.token.ssh-config"


	# Environment variable: “$FOO”
	variableName:
		name: "variable.environment.ssh-config"
		match: "\\G(\\$)(?!\\d)\\w+"
		captures:
			1: name: "punctuation.definition.variable.ssh-config"


	# “*” or “?”
	wildcard:
		name: "keyword.operator.wildcard.pattern.ssh-config"
		match: "[?*]"
