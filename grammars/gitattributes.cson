name: ".gitattributes"
scopeName: "source.gitattributes"
fileTypes: [
	"gitattributes"
	"git/info/attributes"
]
patterns: [include: "#main"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:git-?attributes)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:git-?attributes)
	(?=$|\\s|:)
"""

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#macro"}
			{include: "#pattern"}
			{include: "source.gitignore#escape"}
		]
	
	# Comment line
	comment:
		name:  "comment.line.number-sign.gitattributes"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.gitattributes"
	
	# File pattern
	pattern:
		name:  "meta.pattern.gitattributes"
		begin: "(?=[^#\\s])"
		end:   "$|(?=#)"
		patterns: [{
			include: "source.gitignore#patternInnards"
		},{
			# Whitespace: begin matching attributes
			name:  "meta.attribute-list.gitattributes"
			begin: "\\s"
			end:   "(?=$)"
			patterns: [include: "#attribute"]
		}]

	# Individual attribute
	attribute:
		patterns: [{
			# Invalid attribute name (source: git/attr.c:212)
			name: "meta.attribute.gitattributes"
			match: "([-!](?=\\S))?+([^-A-Za-z0-9_.\\s]\\S*)|([-!])(?=\\s|$)"
			captures:
				1: patterns: [include: "#attributePrefix"]
				2: name: "invalid.illegal.syntax.bad-name.gitattributes"
				3: name: "invalid.illegal.syntax.bad-name.gitattributes"
		},{
			# Valid attribute
			name: "meta.attribute.gitattributes"
			match: "(-|!)?([^\\s=]+)(?:(=)([^\\s]*))?"
			captures:
				1: patterns: [include: "#attributePrefix"]
				2: name: "variable.parameter.attribute.gitattributes"
				3: name: "punctuation.definition.assignment.equals-sign.gitattributes"
				4: name: "constant.language.other.gitattributes"
		}]
	
	# Remove or reset attribute
	attributePrefix:
		patterns: [
			{match: "-", name: "keyword.operator.logical.not.negation.gitattributes"}
			{match: "!", name: "keyword.operator.unset.delete.gitattributes"}
		]


	# Macro attribute definition:
	macro:
		name:  "meta.definition.gitattributes"
		begin: "(?:^|\\G)(\\[)(attr)(\\])([-\\w.]+)"
		end:   "$"
		beginCaptures:
			2: name: "storage.type.attribute.gitattributes"
			4: name: "entity.name.attribute.gitattributes"
			1: patterns: [include: "etc#bracket"]
			3: patterns: [include: "etc#bracket"]
		contentName: "meta.attribute-list.gitattributes"
		patterns: [include: "#attribute"]
