name: "NEON"
scopeName: "source.neon"
fileTypes: ["neon"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#kv"}
			{include: "#boolean"}
			{include: "#brackets"}
			{include: "#datetime"}
			{include: "#int"}
			{include: "#null"}
			{include: "#strings"}
			{include: "#comma"}
			{include: "#number"}
			{include: "#entity"}
			{include: "#unquoted"}
		]


	# Boolean keywords
	boolean:
		patterns: [{
			# True
			name:  "constant.language.boolean.true.neon"
			match: "\\b(TRUE|True|true|YES|Yes|yes|ON|On|on)\\b"
		},{
			# False
			name:  "constant.language.boolean.false.neon"
			match: "\\b(FALSE|False|false|NO|No|no|OFF|Off|off)\\b"
		}]


	# You know what these are
	brackets:
		patterns: [{
			# [Square]
			begin: "\\["
			end:   "\\]"
			beginCaptures: 0: name: "punctuation.definition.bracket.square.begin.neon"
			endCaptures:   0: name: "punctuation.definition.bracket.square.end.neon"
			patterns: [include: "#main"]
		},{
			# {Curly}
			begin: "{"
			end:   "}"
			beginCaptures: 0: name: "punctuation.definition.bracket.curly.brace.begin.neon"
			endCaptures:   0: name: "punctuation.definition.bracket.curly.brace.end.neon"
			patterns: [include: "#main"]
		},{
			# (Round asf)
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.definition.bracket.round.parenthesis.begin.neon"
			endCaptures:   0: name: "punctuation.definition.bracket.round.parenthesis.end.neon"
			patterns: [include: "#main"]
		}]
	
	
	# You know what this is too
	comma:
		name: "punctuation.separator.delimiter.comma.neon"
		match: ","


	# Comments that look like this one
	comment:
		name:  "comment.line.number-sign.neon"
		begin: "(?<=\\s|^)#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.neon"


	# 2020-02-02 12:34:56
	datetime:
		name:  "constant.numeric.datetime.neon"
		match: """(?x)
			
			# Date
			(
				(\\d{4})   (-)  # Year
				(\\d{1,2}) (-)  # Month
				(\\d{1,2})      # Day
			)
			
			# Time
			(
				([Tt]|\\s++)          # Separator
				(\\d{1,2}) (:)        # Hour
				(\\d{2})   (:)        # Minute
				(\\d{2}(?:\\.\\d*+)?) # Second
				\\s*+
				
				# 10: Timezone
				((Z)|[-+]\\d{1,2}(?::?\\d{2})?)?
			)?
			\\s*$
		"""
		captures:
			1:  name: "constant.numeric.date.neon"
			2:  name: "constant.numeric.date.year.neon"
			3:  name: "punctuation.delimiter.separator.dash.hyphen.neon"
			4:  name: "constant.numeric.date.month.neon"
			5:  name: "punctuation.delimiter.separator.dash.hyphen.neon"
			6:  name: "constant.numeric.date.day.neon"
			7:  name: "constant.numeric.time.neon"
			8:  name: "punctuation.separator.datetime.neon"
			9:  name: "constant.numeric.time.hour.neon"
			10: name: "punctuation.delimiter.separator.colon.neon"
			11: name: "constant.numeric.time.minute.neon"
			12: name: "punctuation.delimiter.separator.colon.neon"
			13: name: "constant.numeric.time.second.neon"
			14: name: "constant.numeric.time.timezone.tz.neon"
			15: name: "punctuation.separator.timezone.neon"


	# Column(type=int, nulls=yes)
	entity:
		name: "meta.entity.definition.neon"
		begin: """(?x)
			(
				[^\\#"',:=@\\[\\]{}()\\s!`]
				(?: [^\\#,:=\\]})(]
				| : [^\\s,\\]})]
				| \\S\\#
				)*
			) \\s* (\\()
		"""
		end: "\\)"
		beginCaptures:
			1: name: "entity.name.type.neon"
			2: name: "punctuation.definition.entity.begin.neon"
		endCaptures:
			0: name: "punctuation.definition.entity.end.neon"
		patterns: [include: "#main"]


	# Integer literals
	int:
		patterns: [{
			# Hexadecimal: 0xAF
			name: "constant.numeric.integer.int.hexadecimal.hex.neon"
			match: "0x[0-9a-fA-F]++(?=\\s*$)"
		},{
			# Octal: 0o775
			name:  "constant.numeric.integer.int.octal.oct.neon"
			match: "0o[0-7]++(?=\\s$)"
		},{
			# Binary: 0b1111010101
			name: "constant.numeric.integer.int.binary.bin.neon"
			match: "0b[0-1]++(?=\\s$)"
		}]


	# Key/value pair
	kv:
		match: """(?x)
			(
				[^\\#"',:=@\\[\\]{}()\\s!`]
				(?: [^\\#,:=\\]})(]
				| : [^\\s,\\]})]
				| \\S\\#
				)*+
			)
			(:|=)
		"""
		captures:
			1: name: "entity.name.tag.neon"
			2: name: "keyword.operator.assignment.key-value.neon"


	# Base-10 numeric literals
	number:
		patterns: [{
			# Float, exponential
			name:  "constant.numeric.float.real.decimal.dec.exponential.scientific.neon"
			match: "[-+]?(?:[0-9]*\\.[0-9]+|[0-9]+\\.)(?:[eE][-+]?[0-9]+)++(?=\\s*(?:$|[\\]}),]|(?<=\\s)#))"
		},{
			# Float, normal
			name: "constant.numeric.float.real.decimal.dec.neon"
			match: "[-+]?(?:[0-9]*\\.[0-9]+|[0-9]+\\.)++(?=\\s*(?:$|[\\]}),]|(?<=\\s)#))"
		},{
			# Integer, exponential
			name:  "constant.numeric.integer.int.decimal.dec.exponential.scientific.neon"
			match: "[-+]?[0-9]+[eE][-+]?[0-9]+(?=\\s*(?:$|[\\]}),]|(?<=\\s)#))"
		},{
			# Integer, normal
			name:  "constant.numeric.integer.int.decimal.dec.neon"
			match: "[-+]?[0-9]+(?=\\s*(?:$|[\\]}),]|(?<=\\s)#))"
		}]


	# `null` keyword
	null:
		name: "constant.language.null.neon"
		match: "\\b(NULL|Null|null)\\b(?=\\s*(?:$|[\\]}),]|(?<=\\s)#))"


	# Strings
	strings:
		patterns: [{
			# ''' Multi-line, single-quotes '''
			name:  "string.quoted.single.heredoc.neon"
			begin: "(''')\\s*$"
			end:   "^\\s*(''')"
			beginCaptures: 1: name: "punctuation.definition.string.begin.neon"
			endCaptures:   1: name: "punctuation.definition.string.end.neon"
		},{
			# """ Multi-line, double-quotes """
			name:  "string.quoted.double.heredoc.neon"
			begin: '(""")\\s*$'
			end:   '^\\s*(""")'
			beginCaptures: 1: name: "punctuation.definition.string.begin.neon"
			endCaptures:   1: name: "punctuation.definition.string.end.neon"
		},{
			# 'Single-quotes'
			name:  "string.quoted.single.neon"
			begin: "(')"
			end:   "(')|([^']*)$"
			beginCaptures:
				1: name: "punctuation.definition.string.begin.neon"
			endCaptures:
				1: name: "punctuation.definition.string.end.neon"
				2: name: "invalid.illegal.unclosed.string.neon"
			patterns: [{
				# '' escape
				name:  "constant.character.escape.quote.single.neon"
				match: "''(?!')"
			}]
		},{
			# "Double-quotes"
			name:  "string.quoted.double.neon"
			begin: '(")'
			end:   '(")|([^"]*)$'
			beginCaptures:
				1: name: "punctuation.definition.string.begin.neon"
			endCaptures:
				1: name: "punctuation.definition.string.end.neon"
				2: name: "invalid.illegal.unclosed.string.neon"
			patterns: [{
				# \uFEFF
				name: "constant.character.escape.unicode.codepoint.long.neon"
				match: "(\\\\)u[A-Fa-f0-9]+"
				captures:
					1: name: "punctuation.definition.escape.backslash.neon"
			},{
				# \xFF
				name: "constant.character.escape.unicode.codepoint.short.neon"
				match: "(\\\\)x[A-Fa-f0-9]{2}"
				captures:
					1: name: "punctuation.definition.escape.backslash.neon"
			},{
				# The usual gang of C-style escapes
				name: "constant.character.escape.neon"
				match: "(\\\\)[tnrfb\"\\\\/_]"
				captures:
					1: name: "punctuation.definition.escape.backslash.neon"
			},{
				# Invalid escape
				name:  "invalid.illegal.unknown-escape.neon"
				match: "(\\\\)."
				captures:
					1: name: "punctuation.definition.escape.backslash.neon"
			}]
		}]
		

	# Anything else that didn't match
	unquoted:
		name:  "string.unquoted.literal.neon"
		match: """(?x)
			[^\\#"',:=@\\[\\]{}()\\s!`]
			(?: [^\\#,:=\\]})(]
			| : [^\\s,\\]})]
			| \\S\\#
			)*
		"""
