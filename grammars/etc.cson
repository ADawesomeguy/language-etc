# Reusable, generic patterns for matching recurring language elements
scopeName: "etc"
patterns: [
	{include: "#comma"}
	{include: "#comment"}
	{include: "#esc"}
	{include: "#float"}
	{include: "#int"}
	{include: "#str"}
	{include: "#colon"}
	{include: "#eql"}
	{include: "#dot"}
]

repository:

	# Commas
	comma:
		name: "punctuation.separator.delimiter.comma"
		match: ","

	# Comment-line; alias for `#commentHash`
	comment:
		patterns: [include: "#commentHash"]

	# ## Hash-style comments ##
	commentHash:
		name:  "comment.line.number-sign"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment"

	# ;; Semicolon-style comment ;;
	commentSemi:
		name: "comment.line.semicolon"
		begin: ";+"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment"
	
	# // C++ style double-slash comments
	commentSlash:
		name: "comment.line.double-slash"
		begin: "//"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment"

	# Unquoted string-like argument
	bareword:
		name: "string.unquoted.bareword"
		match: '[^"\\s][\\S]*'

	# True/false
	bool:
		name:  "constant.logical.bool.boolean.${1:/downcase}"
		match: "\\b(true|false|TRUE|FALSE)\\b"

	# Unpaired bracket/brace/parenthesis
	bracket:
		patterns: [
			{match: "\\{", name: "punctuation.definition.bracket.curly.brace.begin"}
			{match: "\\}", name: "punctuation.definition.bracket.curly.brace.end"}
			{match: "\\[", name: "punctuation.definition.bracket.square.begin"}
			{match: "\\]", name: "punctuation.definition.bracket.square.end"}
			{match: "\\(", name: "punctuation.definition.bracket.round.parenthesis.begin"}
			{match: "\\)", name: "punctuation.definition.bracket.round.parenthesis.end"}
			{match: "<",   name: "punctuation.definition.bracket.angle.begin"}
			{match: ">",   name: "punctuation.definition.bracket.angle.end"}
		]
	
	# ...↓
	colon:
		name: "keyword.operator.assignment.key-value.colon"
		match: ":"

	# Dash/US‒ASCII “hyphen‒minus” (U+002D)
	dash:
		name: "punctuation.delimiter.separator.dash.hyphen"
		match: "-"

	# Dots/full-stops/periods/whatever
	dots:
		patterns: [
			{include: "#ellipsis"}  # ...
			{include: "#dotPair"}   # ..
			{include: "#dot"}       # .
		]

	# Dot: .
	dot:
		name: "punctuation.delimiter.separator.property.period.dot"
		match: "\\."
	
	# Lazy ellipsis: ‥
	dotPair:
		name: "keyword.operator.punctuation.dots.splat.range.spread.rest"
		match: "\\.\\.|‥"
	
	# Full-blown ellipsis: ...
	ellipsis:
		name: "keyword.operator.punctuation.ellipsis.splat.range.spread.rest"
		match: "\\.{3}|…"

	# Overblown ellipsis: ........................
	dotTrail:
		name: "punctuation.delimiter.separator.dotted.border.leader.dots"
		match: "\\.{4,}"


	# Escape (Backslash-prefixed anything)
	esc:
		name: "constant.character.escape.backslash"
		match: "(\\\\)."
		captures:
			1: name: "punctuation.definition.escape.backslash"

	# Equals sign delimiting key-value pairs
	eql:
		name: "keyword.operator.assignment.key-value.equals-sign"
		match: "="


	# Floating point
	float:
		patterns: [
			{include: "#floatExp"}
			{include: "#floatNoExp"}
		]
	
	# Float, exponential notation
	floatExp:
		name:  "constant.numeric.float.real.decimal.dec.exponential.scientific"
		match: "[-+]?(?:[0-9]*\\.[0-9]+|[0-9]+\\.)(?:[eE][-+]?[0-9]+)++"
	
	# Float, basic
	floatNoExp:
		name: "constant.numeric.float.real.decimal.dec"
		match: "[-+]?(?:[0-9]*\\.[0-9]+|[0-9]+\\.)++"


	# Hexadecimal, +possibly-signed value
	hex:
		name: "constant.numeric.integer.int.hexadecimal.hex"
		match: "[-+]?[A-Fa-f0-9]+"

	# Hexadecimal, digits only
	hexNoSign:
		name: "constant.numeric.integer.int.hexadecimal.hex"
		match: "[A-Fa-f0-9]+"


	# Integer
	int:
		patterns: [
			{include: "#intExp"}
			{include: "#intNoExp"}
		]
	
	# Integer, exponential notation
	intExp:
		name:  "constant.numeric.integer.int.decimal.dec.exponential.scientific"
		match: "[-+]?[0-9]+[eE][-+]?[0-9]+"
	
	# Integer, basic
	intNoExp:
		name:  "constant.numeric.integer.int.decimal.dec"
		match: "[-+]?[0-9]+"
	
	
	# Dot-separated numbers which quack like an IP address
	ip:
		name:  "constant.numeric.other.ip-address"
		match: "(?:\\d+\\.){3,}\\d+(?=\\s|$)"
		captures:
			0: patterns: [include: "#dot"]
	
	
	# Both floats and integers
	num:
		patterns: [
			{include: "#float"}
			{include: "#int"}
		]
	
	
	# Strings
	str:
		patterns: [
			{include: "#strDouble"}
			{include: "#strSingle"}
		]
	
	# Double-quoted string
	strDouble:
		name:  "string.quoted.double"
		begin: '"'
		end:   '"|(?=$)'
		beginCaptures: 0: name: "punctuation.definition.string.begin"
		endCaptures:   0: name: "punctuation.definition.string.end"
		patterns: [include: "#esc"]
	
	# Single-quoted string
	strSingle:
		name:  "string.quoted.single"
		begin: "'"
		end:   "'|(?=$)"
		beginCaptures: 0: name: "punctuation.definition.string.begin"
		endCaptures:   0: name: "punctuation.definition.string.end"
		patterns: [include: "#esc"]


	# URL/e-mail address
	url:
		patterns: [{
			# https://etc, git://github.com/
			match: """(?x)
				("|'|\\b)
				(
					# Protocol
					( https?
					| s?ftp
					| ftps
					| file
					| wss?
					| smb
					| git (?:\\+https?)?
					| ssh
					| rsync
					| afp
					| nfs
					| (?:x-)?man(?:-page)?
					| gopher
					| txmt
					| issue
					| atom
					) ://
					
					# Path specifier
					(?:
						(?! \\#\\w*\\#)
						(?: [-:\\@\\w.,~%+_/?=&\\#;|!])
					)+
					
					# Don't include trailing punctuation
					(?<![-.,?:\\#;])
				)
				(\\1)
			"""
			captures:
				1: name: "punctuation.definition.link.begin.url"
				2: name: "constant.other.reference.link.underline.$3.url"
				4: name: "punctuation.definition.link.end.url"
		},{
			# mailto:this@guy
			match: """(?x)
				("|'|\\b)
				(
					mailto (:)
					(?:
						(?! \\#\\w*\\#)
						(?: [-:@\\w.,~%+_/?=&\\#;|!])
					)+
					(?<![-.,?:\\#;])
				)
				(\\1)
			"""
			captures:
				1: name: "punctuation.definition.link.begin.url"
				2: name: "constant.other.reference.link.underline.mailto.url"
				3: name: "punctuation.separator.delimiter.scheme.url"
				4: name: "punctuation.definition.link.end.url"
		}]


	# Semantic version string
	version:
		name: "constant.other.version-string"
		match: """(?x)
			("|'|\\b)
			([vV]?)
			(0 | [1-9]\\d*) (\\.)
			(0 | [1-9]\\d*) (\\.)
			(0 | [1-9]\\d*)
			(?:
				(-)
				(
					(?: 0
					| [1-9]\\d*
					| \\d*[a-zA-Z-][0-9a-zA-Z-]*
					)
					
					(?:
						\\.
						(?: 0
						| [1-9]\\d*
						| \\d*[a-zA-Z-][0-9a-zA-Z-]*
						)
					)*
				)
			)?
			(?:
				(\\+)
				(
					[0-9a-zA-Z-]+
					(?:\\.[0-9a-zA-Z-]+)*
				)
			)?
			(\\1)
		"""
		captures:
			1:  name: "punctuation.definition.version-string.begin"
			2:  name: "punctuation.definition.version-prefix"
			3:  name: "meta.major.release-number"
			4:  patterns: [include: "#dot"]
			5:  name: "meta.minor.release-number"
			6:  patterns: [include: "#dot"]
			7:  name: "meta.patch.release-number"
			8:  patterns: [include: "#dash"]
			9:  name: "meta.prerelease.release-number", patterns: [include: "#dot"]
			10: name: "punctuation.delimiter.separator.plus"
			11: name: "meta.build-metadata", patterns: [include: "#dot"]
			12: name: "punctuation.definition.version-string.end"
