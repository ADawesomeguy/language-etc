name: ".gitconfig"
scopeName: "source.gitconfig"
fileTypes: [
	".git/config"
	".config/git/config"
	"gitconfig"
	"gitmodules"
]
patterns: [include: "#main"]
firstLineMatch: """(?ix)

	# Emacs modeline
	-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
		git-?(?:config|modules)
	(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
	
	|
	
	# Vim modeline
	(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
		git-?(?:config|modules)
	(?=\\s|:|$)
"""

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#aliasSection"}
			{include: "#urlSection"}
			{include: "#section"}
		]
	
	# Separate Git/shell aliases
	alias:
		name:  "meta.alias.gitconfig"
		begin: "^\\s*([A-Za-z][-A-Za-z]*)\\s*(=)"
		end:   "(?<!\\\\)$|(?=#)"
		beginCaptures:
			1: name: "variable.parameter.assignment.gitconfig"
			2: name: "keyword.operator.assignment.key-value.gitconfig"
		patterns: [include: "#aliasInnards"]
	
	# Embedded shell/Git commands
	aliasInnards:
		patterns: [{
			# Quoted shell-script
			name:  "meta.quoted.shell.command.gitconfig"
			begin: '\\G\\s*(?:(")(!)|(!)("))\\s*+'
			end:   '(?<!\\\\)(?:(")|(?=$))'
			beginCaptures:
				1: name: "punctuation.definition.string.begin.gitconfig"
				2: name: "keyword.operator.shell-script.gitconfig"
				3: name: "keyword.operator.shell-script.gitconfig"
				4: name: "punctuation.definition.string.begin.gitconfig"
			endCaptures:
				1: name: "punctuation.definition.string.end.gitconfig"
			patterns: [include: "source.shell"]
		},{
			# Unquoted shell-script
			name:  "meta.unquoted.shell.command.gitconfig"
			begin: '\\G\\s*(!)'
			end:   "(?<!\\\\)(?=$)"
			beginCaptures:
				1: name: "keyword.operator.shell-script.gitconfig"
			patterns: [include: "source.shell"]
		},{
			# Git subcommands
			name:  "meta.git.subcommands.gitconfig"
			begin: '\\G\\s*([^\\s"#;!]+)'
			end:   "(?<!\\\\)(?=$|[#;])"
			beginCaptures:
				0: name: "string.unquoted.source.gitconfig"
			contentName: "string.unquoted.source.gitconfig"
			patterns: [include: "#escapedNewline"]
		}]
	
	# [alias] - Block which defines a list of aliased commands
	aliasSection:
		name:  "meta.aliases.section.gitconfig"
		begin: "(?i)^(\\\[)\\s*(alias)\\s*(\\])"
		end:   "^(?=\\[)"
		beginCaptures:
			0: name: "meta.section.header.gitconfig"
			1: name: "punctuation.definition.bracket.square.begin.gitconfig"
			2: name: "entity.section.name.gitconfig"
			6: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#alias"}
			{include: "#comments"}
			{include: "#variables"}
		]
	
	
	# Commented lines beginning with `#` or `;`
	comments:
		patterns: [{
			# Hash/pound
			name:  "comment.line.number-sign.gitconfig"
			begin: "#"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.gitconfig"
		},{
			# Semicolon
			name:  "comment.line.semicolon.gitconfig"
			begin: ";"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.gitconfig"
		}]

	# Line continuation
	escapedNewline:
		name:  "constant.character.escape.newline.gitconfig"
		match: "\\\\$\\s*"

	# [section] block
	section:
		name:  "meta.section.gitconfig"
		begin: """(?x)
			^ (\\[)\\s*(\\]) #1, #2
			|
			^ (\\\[) #3
			\\s*
			(?:
				([-.A-Za-z0-9]+?) #4
				(?:
					(\\.)           #5
					([-A-Za-z0-9]+) #6
				)?
			)
			(?:
				\\s*
				(") #7
				(   #8
					(?: \\\\[\\\\"]
					|   \\\\[^\\\\"]
					|       [^\\\\"]+
					)*
				)
				(") #9
			)?+
			\\s* (\\]) #10
		"""
		end: "^(?=\\[)"
		beginCaptures:
			0:  name: "meta.section.header.gitconfig"
			1:  name: "punctuation.definition.bracket.square.begin.gitconfig"
			2:  name: "punctuation.definition.bracket.square.end.gitconfig"
			3:  name: "punctuation.definition.bracket.square.begin.gitconfig"
			4:  name: "entity.section.name.gitconfig"
			5:  name: "punctuation.delimiter.separator.meta.dot.period.gitconfig"
			6:  name: "entity.subsection.name.deprecated-syntax.gitconfig"
			7:  name: "punctuation.definition.subsection.begin.gitconfig"
			8:  name: "entity.subsection.name.gitconfig", patterns: [include: "#stringEscapes"]
			9:  name: "punctuation.definition.subsection.end.gitconfig"
			10: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#comments"}
			{include: "#variables"}
		]

	# Escape sequences matched in strings
	stringEscapes:
		patterns: [{
			# Escaped backslash or double-quote
			name:  "constant.character.escape.backslash.gitconfig"
			match: '(\\\\)[\\\\"]'
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# Superfluous backslash: \t -> t
			name:  "punctuation.definition.escape.backslash.ignored.gitconfig"
			match: '\\\\(?=[^\\\\"])'
		}]

	# Variable lines within a section block
	variables:
		patterns: [{
			# Signing key
			name:  "meta.variable-field.gitconfig"
			begin: "(?i)\\b(signingkey)(?=\\s|$)"
			end:   "$|(?=#|;)"
			captures:
				1: name: "variable.parameter.assignment.gitconfig"
				2: name: "keyword.operator.assignment.key-value.gitconfig"
			patterns: [{
				# Hexadecimal sigining-key
				name: "constant.other.signing-key.hex.gitconfig"
				match: "\\w+"
			}, include: "#variableInnards"]
		},{
			# URL-type fields
			name:  "meta.variable-field.gitconfig"
			begin: "(?i)\\b(email)\\s*(=)"
			end:   "$|(?=#|;)"
			beginCaptures:
				1: name: "variable.parameter.assignment.gitconfig"
				2: name: "keyword.operator.assignment.key-value.gitconfig"
			patterns: [{
				name:  "string.other.link.gitconfig"
				begin: '"'
				end:   '"|(?=$)'
				beginCaptures: 0: name: "string.quoted.string.begin.gitconfig"
				endCaptures:   0: name: "string.quoted.string.end.gitconfig"
				patterns: [include: "#stringEscapes"]
			},{
				name:  "string.other.link.gitconfig"
				match: '[^\\s"]+'
			}]
		},{
			# Text conversion
			name:  "meta.variable-field.gitconfig"
			begin: "(?i)\\b(textconv)\\s*(=)"
			end:   "$|(?=#|;)"
			beginCaptures:
				1: name: "variable.parameter.assignment.gitconfig"
				2: name: "keyword.operator.assignment.key-value.gitconfig"
			patterns: [include: "#aliasInnards"]
		},{
			# Everything else
			name:  "meta.variable-field.gitconfig"
			begin: "[A-Za-z][-A-Za-z]*"
			beginCaptures:
				0: name: "variable.parameter.assignment.gitconfig"
			end: "$|(?=#|;)"
			patterns: [include: "#variableInnards"]
		}]

	# URL shorthand
	urlSection:
		name:  "meta.url.section.gitconfig"
		begin: """(?ix)
			^ (\\\[) #1
			\\s*
			(url) #2
			(?:
				\\s*
				(") #3
				(   #4
					(?: \\\\[\\\\"]
					|   \\\\[^\\\\"]
					|       [^\\\\"]+
					)*
				)
				(") #5
			)?+
			\\s* (\\]) #6
		"""
		end: "^(?=\\[)"
		beginCaptures:
			0: name: "meta.section.header.gitconfig"
			1: name: "punctuation.definition.bracket.square.begin.gitconfig"
			2: name: "entity.section.name.gitconfig"
			3: name: "punctuation.definition.subsection.begin.gitconfig"
			4: name: "string.other.link.gitconfig", patterns: [include: "#stringEscapes"]
			5: name: "punctuation.definition.subsection.end.gitconfig"
			6: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#comments"}
			{include: "#variables"}
		]

	# Stuff matched after a variable name
	variableInnards:
		patterns: [{
			match: "\\G\\s*(=)"
			captures:
				1: name: "keyword.operator.assignment.key-value.gitconfig"
		},{
			# Boolean-ish keyword
			name:  "constant.logical.boolean.$1.gitconfig"
			match: "(?i)\\b(true|false|on|off|1|0|yes|no)\\b"
		},{
			# Integers
			name:  "constant.numeric.decimal.integer.int.gitconfig"
			match: "[-+]?[0-9]+(?=$|[\\s#;])"
		},{
			# Float
			name:  "constant.numeric.decimal.float.gitconfig"
			match: "[-+]?(?:[0-9]+\\.[0-9]*|\\.[0-9]+)(?=$|\\s#;)"
		},{
			# Anything else
			name: "string.unquoted.argument.gitconfig"
			match: "(?:[^\\\\\\s]|\\\\(?!$))+"
		
		}, include: "#escapedNewline"]
